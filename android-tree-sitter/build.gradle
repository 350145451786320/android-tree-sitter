plugins {
    id 'com.android.library'
    id 'com.vanniktech.maven.publish' version '0.21.0'
}

android {
    namespace 'com.itsaky.androidide.treesitter'
    ndkVersion "24.0.8215888"
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33
        versionName project.findProperty("VERSION_NAME")
        versionCode Integer.valueOf(project.findProperty("VERSION_CODE"))
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
}

dependencies {
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation 'junit:junit:4.13.2'
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

final def archs = ["aarch64", "arm", "x86", "x86_64"]
def inputs = rootProject.file("lib")
def ndkDir = System.getenv("ANDROID_NDK_HOME")
def javaHome = System.getenv("JAVA_HOME")

if (ndkDir == null || javaHome == null) {
    def local = rootProject.file("local.properties")
    if (local.exists()) {
        def props = new Properties()
        props.load(local.newReader())
        ndkDir = props.getProperty("ndk.dir")
        javaHome = props.getProperty("java.home")

        if (ndkDir == null) {
            ndkDir = props.getProperty("ts.ndk.dir")
        }
    }
}

if (ndkDir == null || javaHome == null) {
    throw new IllegalStateException("Please make sure that ANDROID_NDK_HOME and JAVA_HOME environment variables are set.\nts.ndk.dir=$ndkDir\njava.home=$javaHome")
}

for (def arch : archs) {
    task("buildSharedObjectFor${arch.capitalize()}") { Task task ->
        def classifier = classifierFor(arch)
        task.inputs.dir inputs
        task.outputs.file sharedOutput(classifier)

        task.doLast {
            buildFor(arch, classifier, ndkDir, javaHome)
        }
    }
}

def buildFor(String arch, String classifier, String ndkDir, String javaHome) {
    exec {
        environment("JAVA_HOME", javaHome)
        if (classifier == "host") {
            commandLine "${rootProject.projectDir.path}/build.sh", "-s", "python", "java"
        } else {
            commandLine "${rootProject.projectDir.path}/build.sh",
                    "-a", arch,
                    "-m", android.defaultConfig.minSdk,
                    "-n", ndkDir,
                    "python", "java"
        }
    }
}

task buildSharedObjectForHost { Task task ->
    task.inputs.dir inputs
    task.outputs.file sharedOutput("host")
    task.doLast {
        buildFor("", "host", ndkDir, javaHome)
    }
}

task buildSharedObjectForAll() {
    dependsOn("buildSharedObjectForHost")
    dependsOn(archs.collect { "buildSharedObjectFor${it.capitalize()}"})
}

@SuppressWarnings('GrMethodMayBeStatic')
String classifierFor(String arch) {
    def clangPrefix = arch
    def clangSuffix = ""
    if (clangPrefix == "arm") {
        clangPrefix = "armv7a"
        clangSuffix = "eabi"
    }

    if (clangPrefix == "x86") {
        clangPrefix = "i686"
    }

    return "${clangPrefix}-linux-android${clangSuffix}${android.defaultConfig.minSdk}"
}

File sharedOutput(String classifier) {
    return rootProject.file("output/${classifier}/libts.so")
}

tasks.withType(JavaCompile) {
    dependsOn("buildSharedObjectForAll")
}